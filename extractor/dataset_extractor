import pandas as pd
import numpy as np
from collections import Counter
from typing import Optional, Dict


class DatasetMetaExtractor:
    def __init__(self, dataset_id: str, task_type: str, target_feature: Optional[str] = None):
        self.dataset_id = dataset_id
        self.task_type = task_type
        self.target_feature = target_feature

    def extract(self, df: pd.DataFrame) -> Dict:
        n_samples, n_features = df.shape

        # Column type breakdown
        col_types = df.dtypes
        numeric_count = sum(col_types.apply(lambda x: np.issubdtype(x, np.number)))
        categorical_count = sum(col_types == "object")
        boolean_count = sum(col_types == "bool")
        datetime_count = sum(col_types == "datetime64[ns]")

        # Percentages
        numeric_percentages = numeric_count / n_features if n_features else 0
        pct_categorical = categorical_count / n_features if n_features else 0
        pct_boolean = boolean_count / n_features if n_features else 0
        pct_datetime = datetime_count / n_features if n_features else 0

        # Missingness
        avg_missing_ratio = df.isnull().mean().mean()

        # Cardinality
        categorical_cols = df.select_dtypes(include=["object"]).columns
        avg_cardinality = (
            df[categorical_cols].nunique().mean() if len(categorical_cols) > 0 else 0
        )

        # Skewness (numeric only)
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        avg_skewness = (
            df[numeric_cols].skew().mean(skipna=True) if len(numeric_cols) > 0 else 0
        )

        # Class imbalance (classification only)
        class_imbalance_ratio = None
        if self.task_type == "classification" and self.target_feature:
            counts = df[self.target_feature].value_counts()
            class_imbalance_ratio = counts.min() / counts.max() if len(counts) > 1 else 1.0

        meta = {
            "dataset_id": self.dataset_id,
            "n_samples": n_samples,
            "n_features": n_features,
            "task_type": self.task_type,
            "numeric_percentages": numeric_percentages,
            "pct_categorical": pct_categorical,
            "pct_boolean": pct_boolean,
            "pct_datetime": pct_datetime,
            "avg_missing_ratio": avg_missing_ratio,
            "avg_cardinality": avg_cardinality,
            "avg_skewness": avg_skewness,
            "class_imbalance_ratio": class_imbalance_ratio,
        }

        return meta


if __name__ == "__main__":
    # Example usage
    df = pd.DataFrame({
        "age": [25, 30, 35, np.nan, 40],
        "gender": ["M", "F", "M", "M", "F"],
        "income": [50000, 60000, 55000, 58000, None],
        "label": [0, 1, 0, 0, 1]
    })

    extractor = DatasetMetaExtractor(dataset_id="ds_001", task_type="classification", target_feature="label")
    meta_features = extractor.extract(df)

    print(pd.DataFrame([meta_features]))
